package com.wayproyect.servercmd.vistas;

import com.wayproyect.servercmd.entidades.Log;
import com.wayproyect.servercmd.persistencia.implementacion.LogPersistencia;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import servercmd.ServerCMD;

/**
 *
 * @author Julio C. Ramos
 * @e-mail ramos.isw@gmail.com
 */
public class ServerCMDVista extends javax.swing.JFrame {

    /**
     * Creates new form ServerCMD
     */
    ServerCMD server;
    String IP;
    String USER;

    public ServerCMDVista() {
        new servercmd.CrearBD().CrearDB();
        initComponents();
        Log log = new Log();
        log.setAccion("System Start");
        log.setUsuario("System");
        new LogPersistencia().guardar(log);
        getLog();
        tbl_logs.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                tbl_logs.scrollRectToVisible(tbl_logs.getCellRect(tbl_logs.getRowCount() - 1, 0, true));
            }
        });
        this.setLocationRelativeTo(null);

        this.USER = this.getUserMachine();
        this.lbl_user.setText(USER);
        this.addWindowListener(new SaveOnClose());
        this.runServer();
        this.tbl_logs.getColumn("TimeDate").setPreferredWidth(160);
        this.tbl_logs.getColumn("TimeDate").setMaxWidth(160);
        this.tbl_logs.getColumn("TimeDate").setMinWidth(160);
        this.tbl_logs.getColumn("User").setWidth(200);
        this.tbl_logs.getColumn("User").setMaxWidth(300);
        IP = getIP();
        lbl_ip.setText(IP);
        Timer timer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IP = getIP();
                lbl_ip.setText(IP);
            }
        });
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lbl_ip = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_port = new javax.swing.JTextField();
        btn_run = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        btn_clear = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_logs = new javax.swing.JTable();
        lbl_status = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbl_user = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CMD-Server | v1.0");

        jLabel1.setText("IP:");

        lbl_ip.setText("255.255.255.255");

        jLabel3.setText("PORT:");

        txt_port.setText("5050");
        txt_port.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_portKeyTyped(evt);
            }
        });

        btn_run.setText("RUN");
        btn_run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_runActionPerformed(evt);
            }
        });

        jLabel4.setText("LOG:");

        btn_clear.setText("CLEAR");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("CMD-Server");

        tbl_logs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"12/31/2012 - 59:59:59", null, null}
            },
            new String [] {
                "TimeDate", "User", "Acction"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_logs.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane1.setViewportView(tbl_logs);

        lbl_status.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_status.setForeground(new java.awt.Color(255, 51, 0));
        lbl_status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_status.setText("STOP");

        jLabel2.setText("USER:");

        lbl_user.setText("USER");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_user, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbl_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txt_port, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_run))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_clear))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lbl_ip)
                    .addComponent(jLabel3)
                    .addComponent(txt_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_run)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lbl_user))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btn_clear)
                    .addComponent(lbl_status))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_runActionPerformed
        // TODO add your handling code here:
        if (btn_run.isSelected()) {
            this.runServer();
        } else {
            this.server.stop();
            this.server = null;
            this.txt_port.setEnabled(true);
            this.lbl_status.setText("STOP");
            this.lbl_status.setForeground(Color.RED);
            Log log = new Log();
            log.setAccion("STOP");
            log.setUsuario("System");
            new LogPersistencia().guardar(log);
        }
        this.getLog();
    }//GEN-LAST:event_btn_runActionPerformed

    private void txt_portKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_portKeyTyped
        if (!Character.isDigit(evt.getKeyChar()) || !(txt_port.getText().length() < 5)) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_portKeyTyped

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        new servercmd.CrearBD().vaciarDB();
        this.getLog();
    }//GEN-LAST:event_btn_clearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerCMDVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ServerCMDVista().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clear;
    private javax.swing.JToggleButton btn_run;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_ip;
    private javax.swing.JLabel lbl_status;
    private javax.swing.JLabel lbl_user;
    private javax.swing.JTable tbl_logs;
    private javax.swing.JTextField txt_port;
    // End of variables declaration//GEN-END:variables

    public final void getLog() {
        List<Log> logs = new LogPersistencia().obtenerLog();
        DefaultTableModel Mtbl_logs = (DefaultTableModel) this.tbl_logs.getModel();
        System.out.println(logs);
        if (logs.isEmpty()) {
            for (int i = 0; i < Mtbl_logs.getRowCount(); i++) {
                Mtbl_logs.removeRow(i);
            }
        }
        Mtbl_logs.getDataVector().clear();
        for (Log i : logs) {
            Mtbl_logs.addRow(new Object[]{
                i.getDatetime(),
                i.getUsuario(),
                i.getAccion()
            });
        }
    }

    private String getIP() {
        String ip = "";

        try {
            InetAddress address = InetAddress.getLocalHost();
            byte[] bytes = address.getAddress();
            for (int i = 0; i < bytes.length; i++) {
                int uByte = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];
                String punto = i == 0 ? "" : ".";
                ip += punto + uByte;
            }
        } catch (UnknownHostException ex) {
            System.out.println(ex);
        }
        // Convierte los bytes de la dirección IP a valores sin
        // signo y los presenta separados por espacios
        return ip;
    }

    private String getUserMachine() {
        String userMachine = "";
        try {
            InetAddress address = InetAddress.getLocalHost();
            userMachine = address.getHostName();
        } catch (UnknownHostException e) {
            System.out.println(e.toString());
        }
        return userMachine;
    }

    private void runServer() {
        this.btn_run.setSelected(true);
        this.txt_port.setEnabled(false);
        this.lbl_status.setText("RUNNING");
        this.lbl_status.setForeground(Color.GREEN);
        int PORT = Integer.parseInt(this.txt_port.getText());
        this.server = new ServerCMD("CMD-Server-" + USER, PORT, this);
        this.server.run();
        Log log = new Log();
        log.setAccion("RUN " + PORT + ";CMD-Server-" + USER);
        log.setUsuario("System");
        new LogPersistencia().guardar(log);
        getLog();
    }

    private class SaveOnClose extends WindowAdapter {

        @Override
        public void windowClosing(WindowEvent e) {
            Log log = new Log();
            log.setAccion("System Close");
            log.setUsuario("System");
            new LogPersistencia().guardar(log);
            System.out.println("saving");
            System.exit(0);
        }
    }
}
